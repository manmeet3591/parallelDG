#!/usr/bin/env python

import json
import argparse

import numpy as np
import networkx as nx
from networkx.readwrite import json_graph

import parallelDG.auxiliary_functions
import parallelDG.graph.graph as glib
import parallelDG.distributions.g_intra_class as gic
from parallelDG.graph.decomposable import gen_AR2_graph
import matplotlib.pyplot as plt
import seaborn as sns

np.set_printoptions(precision=1)
# G-Intra class (AR(2))


def main(n_dim,
         n_samples,
         correlation,
         variance,
         output_directory,
         seed):

    if seed:
        np.random.seed(seed)

    directory = output_directory + "/interclass_"
    s2 = variance
    rho = correlation
    graph = gen_AR2_graph(n_dim)
    adjmat = nx.to_numpy_matrix(graph)
    X = gic.sample(graph, rho, s2, n_samples).T
    c = gic.cov_matrix(graph, rho, s2)

    graph_filename_json = directory + "p_" + str(n_dim) + ".json"

    with open(graph_filename_json, 'w') as outfile:
        js_graph = json_graph.node_link_data(graph)
        json.dump(js_graph, outfile)

    graph_filename_plot = directory+"p_"+str(n_dim)+".eps"
    glib.plot(graph, graph_filename_plot, layout="fdp")

    graph_filename_adjmat_plot = directory+"p_"+str(n_dim)+"_adjmat.eps"

    plt.clf()
    mask = np.zeros_like(adjmat)
    mask[np.triu_indices_from(mask)] = True
    with sns.axes_style("white"):
        sns.heatmap(adjmat, mask=mask, annot=False,
                    cmap="Blues",
                    xticklabels=range(1, n_dim+1),
                    yticklabels=range(1, n_dim+1),
                    vmin=0.0, vmax=1.0, square=True,
                    cbar=False)
        plt.xticks(rotation=90)
        plt.yticks(rotation=0)
        plt.savefig(graph_filename_adjmat_plot,
                    format="eps", bbox_inches='tight', dpi=300)

    data_filename = directory+"p_"+str(n_dim)+ \
        "_sigma2_"+str(s2) + \
        "_rho_"+str(rho)+"_n_"+str(n_samples)+".csv"
    np.savetxt(data_filename, X, delimiter=',')   

    precmat_filename = directory+"p_"+str(n_dim)+"_sigma2_"+ \
        str(s2) + "_rho_"+str(rho)+"_omega.txt"
    np.savetxt(precmat_filename, c.I, delimiter=',')
    
    precmat_filename_plot = directory+"p_"+str(n_dim) + \
        "_sigma2_"+str(s2) + \
        "_rho_"+str(rho)+"_omega.eps"
    plt.clf()
    mask = np.zeros_like(c.I)
    mask[np.triu_indices_from(mask)] = True
    with sns.axes_style("white"):
        sns.heatmap(c.I, mask=mask, annot=False,
                    cmap="Blues",
                    xticklabels=range(1, n_dim+1),
                    yticklabels=range(1, n_dim+1),
                    vmin=0.0, vmax=1.0, square=True,
                    cbar=False)
        plt.xticks(rotation=90)
        plt.yticks(rotation=0)
        plt.savefig(precmat_filename_plot,
                    format="eps", bbox_inches='tight', dpi=300)
       

    print "Generated files:"
    print graph_filename_json + "\n" + \
          graph_filename_plot + "\n" + \
          graph_filename_adjmat_plot + "\n" + \
          data_filename + "\n" +\
          precmat_filename + "\n" + \
          precmat_filename_plot

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description="Generates samples from a graph "
        "intra-class model and saves the precision matrix.")
    parser.add_argument(
        '-p', '--n_dim',
        type=int, required=True,
        help="The sample dimension"
    )
    parser.add_argument(
        '-n', '--n_samples',
        type=int, required=True,
        help="Number of samples"
    )
    parser.add_argument(
        '-r', '--correlation',
        type=float, required=True,
        help="Correlation coefficient"
    )
    parser.add_argument(
        '-v', '--variance',
        type=float, required=True,
        help="Variance"
    )
    parser.add_argument(
        '-o', '--output_directory',
        required=False,
        default="."
    )
    parser.add_argument(
        '-s', '--seed',
        type=int, required=False, default=None
    )
    
    args = parser.parse_args()
    main(**args.__dict__)
